name: CI

on:
  push:
    paths-ignore:
      - "**/*.md"
  pull_request:
    paths-ignore:
      - "**/*.md"
  workflow_dispatch:

# Ensure only one run per branch (PR or push), cancel older ones
concurrency:
  group: ci-${{ github.workflow }}-${{ github.event.pull_request.head.ref || github.ref_name }}
  cancel-in-progress: true

permissions:
  # id-token: write
  contents: write

env:
  PYTHON_VERSION: "3.12"
  ROOT: "${{ github.workspace }}"
  SDK_PYTHON_PATH: "${{ github.workspace }}/sdk/python"
  #  - GEMFURY_TOKEN
  #  - PUB_DEV_TOKEN (base64-encoded dart pub credentials json, like in AppVeyor)
  #  - (optional) PYODIDE_URL, PYODIDE_CDN_URL override at job-level for web build

jobs:
  # ==============================
  # Build Flet package for Flutter
  # ==============================
  build_flet_package:
    name: Build Flet package for Flutter
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' || github.base_ref != github.ref_name }} # mimic skip_branch_with_pr
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # fetch all history
          fetch-tags: true # ensure tags are available

      - name: Setup uv
        uses: astral-sh/setup-uv@v6

      - name: Compute versions
        run: |
          source .github/scripts/update_build_version.sh

      - name: Setup Flutter
        uses: kuhnroyal/flutter-fvm-config-action/setup@v3
        with:
          path: '.fvmrc'
          cache: true

      - name: Build and Publish Dart Packages
        env:
          PUB_DEV_TOKEN: ${{ secrets.PUB_DEV_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail

          if [[ "${GITHUB_REF_TYPE:-}" == "tag" ]]; then
            mkdir -p "$HOME/.config/dart"
            # PUB_DEV_TOKEN should be a base64 of pub-credentials.json in repo secrets
            printf %s "$PUB_DEV_TOKEN" | base64 --decode > "$HOME/.config/dart/pub-credentials.json"

            # patch pubspecs
            for dir in packages/flet*; do
              echo "Patching $dir/pubspec.yaml"
              uv run .github/scripts/patch_pubspec.py "$dir/pubspec.yaml" "$PKG_VER"
            done

            pushd packages/flet
            echo "Running flet tests"
            flutter test
            dart pub publish --force
          else
            pushd packages/flet
            echo "Running flet tests"
            flutter test
            # dart pub publish --dry-run
          fi

          # Return to repo root
          cd "$ROOT"


  # ======================
  # Build Flet - Windows
  # ======================
  build_windows:
    name: Build Flet for Windows
    runs-on: windows-latest
    needs: [build_flet_package]
    if: ${{ github.event_name != 'pull_request' || github.base_ref != github.ref_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup uv
        uses: astral-sh/setup-uv@v6

      - name: Setup Flutter
        uses: kuhnroyal/flutter-fvm-config-action/setup@v3
        with:
          path: '.fvmrc'
          cache: true

      - name: Prepare env and patch versions
        shell: pwsh
        run: |
          $Env:flet_sdk_root = "$Env:ROOT\sdk\python"
          $Env:PYPI_VER = "${{ needs.build_flet_package.outputs.PYPI_VER || github.run_number }}"
          $Env:PYPI_VER = "$($Env:PYPI_VER)".Replace("+", ".dev")
          $vp = "$Env:flet_sdk_root\packages\flet-desktop\src\flet_desktop\version.py"
          (Get-Content $vp).Replace('version = ""', "version = `"$Env:PYPI_VER`"") | Set-Content $vp
          uv run .github/scripts/patch_toml_versions.py "$Env:flet_sdk_root/packages/flet-desktop/pyproject.toml" "$Env:PYPI_VER"

      - name: Build Flutter Windows client
        shell: pwsh
        run: |
          cd client
          $Env:RELEASE_DIR="build\windows\x64\runner\Release"
          flutter build windows --build-name="${{ needs.build_flet_package.outputs.PYPI_VER || github.run_number }}"
          Copy-Item "$Env:WINDIR\system32\msvcp140.dll" $Env:RELEASE_DIR
          Copy-Item "$Env:WINDIR\system32\vcruntime140.dll" $Env:RELEASE_DIR
          Copy-Item "$Env:WINDIR\system32\vcruntime140_1.dll" $Env:RELEASE_DIR
          Rename-Item "build\windows\x64\runner\Release" "flet"
          cd build\windows\x64\runner
          7z a flet-windows.zip flet
          New-Item -ItemType Directory -Force -Path "$Env:GITHUB_WORKSPACE\sdk\python\packages\flet-desktop\src\flet_desktop\app" | Out-Null
          robocopy flet "$Env:GITHUB_WORKSPACE\sdk\python\packages\flet-desktop\src\flet_desktop\app\flet" /e
          echo "done"

      - name: Build wheels
        shell: pwsh
        run: |
          cd sdk\python
          uv build --wheel --package flet-desktop
          Get-ChildItem -Path dist/*-py3-none-any.whl | ForEach-Object {
            uv run $Env:GITHUB_WORKSPACE\.github\scripts\repackage_wheel_with_tag.py $_.FullName "py3-none-win_amd64"
            uv run $Env:GITHUB_WORKSPACE\.github\scripts\repackage_wheel_with_tag.py $_.FullName "py3-none-win32"
            Remove-Item $_.FullName
          }
          dir dist

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: |
            client/build/windows/x64/runner/flet-windows.zip
            sdk/python/dist/*.whl

      - name: Publish wheels
        if: ${{ (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')) && github.event_name != 'pull_request' }}
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
          GEMFURY_TOKEN: ${{ secrets.GEMFURY_TOKEN }}
        shell: pwsh
        run: |
          uvx twine --version
          if ("${{ startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' }}" -eq "True") {
            uvx twine upload "$Env:GITHUB_WORKSPACE\sdk\python\dist\*"
          } else {
            $wheels = Get-ChildItem "$Env:GITHUB_WORKSPACE\sdk\python\dist\*.whl" | Select-Object -ExpandProperty FullName
            foreach ($wheel in $wheels) {
              curl.exe -s -F "package=@$wheel" "https://${env:GEMFURY_TOKEN}@push.fury.io/flet/"
            }
          }

  # =====================
  # Build Flet - macOS
  # =====================
  build_macos:
    name: Build Flet for macOS
    runs-on: macos-latest
    needs: [build_flet_package]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup uv
        uses: astral-sh/setup-uv@v6

      - name: Setup Flutter
        uses: kuhnroyal/flutter-fvm-config-action/setup@v3
        with:
          path: '.fvmrc'
          cache: true

      - name: Build Flutter macOS client
        shell: bash
        run: |
          set -e
          pushd client
          flutter build macos --build-name="${GITHUB_RUN_NUMBER}"
          tar -czvf flet-macos.tar.gz -C build/macos/Build/Products/Release Flet.app
          mkdir -p "${SDK_PYTHON_PATH}/packages/flet-desktop/src/flet_desktop/app"
          cp flet-macos.tar.gz "${SDK_PYTHON_PATH}/packages/flet-desktop/src/flet_desktop/app"
          popd

      - name: Patch Python package versions
        env:
          PYPI_VER: ${{ needs.build_flet_package.outputs.PYPI_VER }}
        shell: bash
        run: |
          source .github/scripts/common.sh
          patch_python_package_versions

      - name: Build wheels
        shell: bash
        run: |
          set -e
          cd "${SDK_PYTHON_PATH}"
          uv build --wheel --package flet-desktop
          for file in dist/*-py3-none-any.whl; do
            uv run "$ROOT/.github/scripts/repackage_wheel_with_tag.py" "$file" "py3-none-macosx_12_0_arm64"
            uv run "$ROOT/.github/scripts/repackage_wheel_with_tag.py" "$file" "py3-none-macosx_10_14_x86_64"
            rm "$file"
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifacts
          path: |
            client/flet-macos.tar.gz
            ${SDK_PYTHON_PATH}/dist/*.whl

      - name: Publish to PyPI
        if: ${{ (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')) && github.event_name != 'pull_request' }}
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
        run: |
          source .github/scripts/common.sh
          publish_to_pypi dist/*.whl
        working-directory: sdk/python

  # =========================
  # Build Flet - Linux (x64)
  # =========================
  build_linux_amd64:
    name: Build Flet for Linux (x64)${{ matrix.light && ' Light' || '' }}
    runs-on: ubuntu-latest
    needs: [build_flet_package]
    strategy:
      matrix:
        light: [false, true]
    env:
      ARCH: amd64
      PACKAGE_NAME: ${{ matrix.light && 'flet-desktop-light' || 'flet-desktop' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup uv
        uses: astral-sh/setup-uv@v6

      - name: Setup Flutter
        uses: kuhnroyal/flutter-fvm-config-action/setup@v3
        with:
          path: '.fvmrc'
          cache: true

      - name: Install dependencies
        shell: bash
        run: |
          sudo sed -i.bak '/apt.postgresql.org/s/^/# /' /etc/apt/sources.list
          sudo apt update --allow-releaseinfo-change
          sudo apt install -y clang libgtk-3-dev libasound2-dev
          if [[ "${PACKAGE_NAME}" == "flet-desktop" ]]; then
            sudo apt install -y libmpv-dev mpv libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-bad1.0-dev gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav gstreamer1.0-doc gstreamer1.0-tools gstreamer1.0-x gstreamer1.0-alsa gstreamer1.0-gl gstreamer1.0-gtk3 gstreamer1.0-qt5 gstreamer1.0-pulseaudio
          fi

      - name: Build Flutter Linux client
        shell: bash
        run: |
          set -e
          source .github/scripts/common.sh
          pushd client
          if [[ "${PACKAGE_NAME}" == "flet-desktop-light" ]]; then
            sed -i '/--FAT_CLIENT_START--/,/--FAT_CLIENT_END--/d' pubspec.yaml
            sed -i '/--FAT_CLIENT_START--/,/--FAT_CLIENT_END--/d' lib/main.dart
            patch_flet_desktop_package_name "flet-desktop-light"
            artifact_suffix="-light"
          fi
          wheel_tags=(
            "py3-none-manylinux_2_17_x86_64,py3-none-manylinux2014_x86_64"
            "py3-none-musllinux_1_2_x86_64"
          )
          flutter build linux --build-name="${GITHUB_RUN_NUMBER}"
          mv build/linux/x64/release/bundle build/linux/x64/release/flet
          tar -czvf "flet-linux${artifact_suffix:-}-amd64.tar.gz" -C build/linux/x64/release flet
          mkdir -p "${SDK_PYTHON_PATH}/packages/flet-desktop/src/flet_desktop/app"
          cp "flet-linux${artifact_suffix:-}-amd64.tar.gz" "${SDK_PYTHON_PATH}/packages/flet-desktop/src/flet_desktop/app/flet-linux-amd64.tar.gz"
          popd

      - name: Patch Python package versions
        env:
          PYPI_VER: ${{ needs.build_flet_package.outputs.PYPI_VER }}
        shell: bash
        run: |
          source .github/scripts/common.sh
          patch_python_package_versions
          if [[ "${PACKAGE_NAME}" == "flet-desktop-light" ]]; then
            sed -i 's/flet-desktop/flet-desktop-light/g' "${SDK_PYTHON_PATH}/pyproject.toml"
          fi

      - name: Build wheels
        shell: bash
        run: |
          set -e
          cd "sdk/python"
          uv build --wheel --package "${PACKAGE_NAME}"
          for file in dist/*-py3-none-any.whl; do
            uv run "$root/.github/scripts/repackage_wheel_with_tag.py" "$file" "py3-none-manylinux_2_17_x86_64,py3-none-manylinux2014_x86_64"
            uv run "$root/.github/scripts/repackage_wheel_with_tag.py" "$file" "py3-none-musllinux_1_2_x86_64"
            rm "$file"
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-amd64${{ matrix.light && '-light' || '' }}-artifacts
          path: |
            client/flet-linux*.tar.gz
            sdk/python/dist/*.whl

      - name: Publish to PyPI
        if: ${{ (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')) && github.event_name != 'pull_request' }}
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
        run: |
          source .github/scripts/common.sh
          publish_to_pypi dist/*.whl
        working-directory: sdk/python

  # ============================
  # Build Flet - Linux (ARM64)
  # ============================
  build_linux_arm64:
    name: Build Flet for Linux (ARM64)${{ matrix.light && ' Light' || '' }}
    # NOTE: Requires an ARM64 hosted runner or self-hosted runner.
    runs-on: ubuntu-latest
    needs: [build_flet_package]
    strategy:
      matrix:
        light: [false, true]
    env:
      ARCH: arm64
      PACKAGE_NAME: ${{ matrix.light && 'flet-desktop-light' || 'flet-desktop' }}
      PYTHON_VERSION: "3.10"  # matches AppVeyor override for ARM64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup uv
        uses: astral-sh/setup-uv@v6

      - name: Setup Flutter
        uses: kuhnroyal/flutter-fvm-config-action/setup@v3
        with:
          path: '.fvmrc'
          cache: true

      - name: Install dependencies
        shell: bash
        run: |
          sudo apt update
          sudo apt install -y clang libgtk-3-dev libasound2-dev
          if [[ "${PACKAGE_NAME}" == "flet-desktop" ]]; then
            sudo apt install -y libmpv-dev mpv libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-bad1.0-dev gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav gstreamer1.0-doc gstreamer1.0-tools gstreamer1.0-x gstreamer1.0-alsa gstreamer1.0-gl gstreamer1.0-gtk3 gstreamer1.0-qt5 gstreamer1.0-pulseaudio
          fi
          git clone https://github.com/flutter/flutter.git -b stable "$HOME/flutter"
          echo "$HOME/flutter/bin" >> $GITHUB_PATH

      - name: Build Flutter Linux client
        shell: bash
        run: |
          set -e
          source .github/scripts/common.sh
          pushd client
          if [[ "${PACKAGE_NAME}" == "flet-desktop-light" ]]; then
            sed -i '/--FAT_CLIENT_START--/,/--FAT_CLIENT_END--/d' pubspec.yaml
            sed -i '/--FAT_CLIENT_START--/,/--FAT_CLIENT_END--/d' lib/main.dart
            patch_flet_desktop_package_name "flet-desktop-light"
            artifact_suffix="-light"
          fi
          flutter build linux --build-name="${GITHUB_RUN_NUMBER}"
          mv build/linux/arm64/release/bundle build/linux/arm64/release/flet
          tar -czvf "flet-linux${artifact_suffix:-}-arm64.tar.gz" -C build/linux/arm64/release flet
          mkdir -p "sdk/python/packages/flet-desktop/src/flet_desktop/app"
          cp "flet-linux${artifact_suffix:-}-arm64.tar.gz" "sdk/python/packages/flet-desktop/src/flet_desktop/app/flet-linux-arm64.tar.gz"
          popd

      - name: Patch versions & build wheels
        env:
          PYPI_VER: ${{ needs.build_flet_package.outputs.PYPI_VER }}
        shell: bash
        run: |
          set -e
          source .github/scripts/common.sh
          patch_python_package_versions
          if [[ "${PACKAGE_NAME}" == "flet-desktop-light" ]]; then
            sed -i 's/flet-desktop/flet-desktop-light/g' "sdk/python/pyproject.toml"
          fi
          cd "sdk/python"
          uv build --wheel --package "${PACKAGE_NAME}"
          for file in dist/*-py3-none-any.whl; do
            uv run "$root/.github/scripts/repackage_wheel_with_tag.py" "$file" "py3-none-manylinux_2_17_aarch64,py3-none-manylinux2014_aarch64"
            uv run "$root/.github/scripts/repackage_wheel_with_tag.py" "$file" "py3-none-musllinux_1_2_aarch64"
            rm "$file"
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-arm64${{ matrix.light && '-light' || '' }}-artifacts
          path: |
            client/flet-linux*.tar.gz
            sdk/python/dist/*.whl

      - name: Publish to PyPI
        if: ${{ (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')) && github.event_name != 'pull_request' }}
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
        run: |
          source .github/scripts/common.sh
          publish_to_pypi dist/*.whl
        working-directory: sdk/python

  # =================
  # Build Flet - Web
  # =================
  build_web:
    name: Build Flet for web
    runs-on: ubuntu-latest
    needs: [build_flet_package]
    env:
      PYODIDE_URL: "https://github.com/pyodide/pyodide/releases/download/0.27.7/pyodide-core-0.27.7.tar.bz2"
      PYODIDE_CDN_URL: "https://cdn.jsdelivr.net/pyodide/v0.27.7/full"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup uv
        uses: astral-sh/setup-uv@v6

      - name: Setup Flutter
        uses: kuhnroyal/flutter-fvm-config-action/setup@v3
        with:
          path: '.fvmrc'
          cache: true

      - name: Build web client + Python package
        shell: bash
        env:
          PYPI_VER: ${{ needs.build_flet_package.outputs.PYPI_VER }}
        run: |
          set -e
          source .github/scripts/common.sh
          pushd client
          flutter build web --wasm
          cp -R build/web "${SDK_PYTHON_PATH}/packages/flet-web/src/flet_web"
          # Safari mobile workaround + pyodide extras
          ls "$(dirname "$(command -v flutter)")/cache/flutter_web_sdk/flutter_js"
          cp "$(dirname "$(command -v flutter)")/cache/flutter_web_sdk/flutter_js/flutter.js.map" "${SDK_PYTHON_PATH}/packages/flet-web/src/flet_web/web"
          curl -L "$PYODIDE_URL" | tar -xj -C "${SDK_PYTHON_PATH}/packages/flet-web/src/flet_web/web"
          curl -L "$PYODIDE_CDN_URL/packaging-24.2-py3-none-any.whl" -o "${SDK_PYTHON_PATH}/packages/flet-web/src/flet_web/web/pyodide/packaging-24.2-py3-none-any.whl"
          curl -L "$PYODIDE_CDN_URL/micropip-0.8.0-py3-none-any.whl" -o "${SDK_PYTHON_PATH}/packages/flet-web/src/flet_web/web/pyodide/micropip-0.8.0-py3-none-any.whl"
          popd
          tar -czvf client/build/flet-web.tar.gz -C client/build/web .

          cd "${SDK_PYTHON_PATH}"
          patch_python_package_versions
          uv build --wheel --package flet-web

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-artifacts
          path: |
            client/build/flet-web.tar.gz
            sdk/python/dist/*.whl

      - name: Publish to PyPI
        if: ${{ (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')) && github.event_name != 'pull_request' }}
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
        run: |
          source .github/scripts/common.sh
          publish_to_pypi dist/*.whl
        working-directory: sdk/python

  # ================
  # Python test jobs
  # ================
  python_tests:
    name: Python ${{ matrix.python-version }} tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup uv
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Run tests
        shell: bash
        run: |
          source .github/scripts/common.sh
          cd sdk/python
          uv run --group test pytest packages/flet/tests
          uv run --directory packages/flet --group docs-coverage docstr-coverage > docstr_coverage.log 2>&1

      - name: Upload test logs
        uses: actions/upload-artifact@v4
        with:
          name: docs-coverage-${{ matrix.py }}
          path: sdk/python/packages/flet/*.log

  # ===========================
  # Build & publish Python bits
  # ===========================
  python_build:
    name: Build Python wheels (flet & flet-cli)
    runs-on: ubuntu-latest
    needs:
      - python_tests
      - build_windows
      - build_macos
      - build_linux_amd64
      - build_linux_arm64
      - build_web
    if: ${{ github.event_name != 'pull_request' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup uv
        uses: astral-sh/setup-uv@v6

      - name: Build & publish
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
          PYPI_VER: ${{ needs.build_flet_package.outputs.PYPI_VER }}
        shell: bash
        run: |
          set -e
          source .github/scripts/common.sh
          patch_python_package_versions
          cd "sdk/python"
          uv build --wheel --package flet-cli
          uv build --wheel --package flet
          uv run "$root/.github/scripts/update_flet_wheel_deps.py" dist
          publish_to_pypi dist/*.whl
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: python-wheels
          path: sdk/python/dist/*.whl

  # ======================
  # Attach artifacts to GH Release on tag
  # ======================
  release:
    name: Attach artifacts to GitHub Release
    runs-on: ubuntu-latest
    needs:
      - build_windows
      - build_macos
      - build_linux_amd64
      - build_linux_arm64
      - build_web
      - python_build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create/Update Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            dist/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
