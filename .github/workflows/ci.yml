name: CI

on:
  push:
    tags:
      - '*'
    paths-ignore:
      - "**/*.md"
  pull_request:
    paths-ignore:
      - "**/*.md"
  workflow_dispatch:

permissions:
  id-token: write
  contents: write

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  ROOT: "${{ github.workspace }}"
  SDK_PYTHON: "${{ github.workspace }}/sdk/python"
  SCRIPTS: "${{ github.workspace }}/.github/scripts"
  UV_PYTHON: "3.12"
  PYODIDE_VERSION: "0.28.3"

jobs:
  # ============
  # Python tests
  # ============
  python_tests:
    name: Python ${{ matrix.python-version }} tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.10", "3.11", "3.12", "3.13" ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup uv
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Run tests
        shell: bash
        working-directory: ${{ env.SDK_PYTHON }}
        run: |
          uv run --no-dev --group test pytest packages/flet/tests

      - name: Run docs-coverage
        if: matrix.python-version == '3.12'
        shell: bash
        working-directory: ${{ env.SDK_PYTHON }}
        run: uv run --directory packages/flet --no-dev --group docs-coverage docstr-coverage > docstr_coverage.log 2>&1

      - name: Upload docs-coverage logs
        if: matrix.python-version == '3.12'
        uses: actions/upload-artifact@v4
        with:
          name: docs-coverage
          path: sdk/python/docstr_coverage.log

  # ===========================
  # Build Flet Flutter package
  # ===========================
  build_flet_package:
    name: Build Flet Flutter package
    runs-on: ubuntu-latest
    outputs:
      PKG_VER: ${{ steps.versions.outputs.PKG_VER }}
      BUILD_VER: ${{ steps.versions.outputs.BUILD_VER }}
      PYPI_VER: ${{ steps.versions.outputs.PYPI_VER }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # fetch all history
          fetch-tags: true # ensure tags are available

      - name: Setup uv
        uses: astral-sh/setup-uv@v6

      - name: Compute versions
        id: versions
        run: source "${SCRIPTS}/update_build_version.sh"

      - name: Setup Flutter
        uses: kuhnroyal/flutter-fvm-config-action/setup@v3
        with:
          path: '.fvmrc'
          cache: true

      - name: Run tests
        shell: bash
        working-directory: packages/flet
        run: flutter test

      - name: Publish to pub.dev
        shell: bash
        env:
          PUB_DEV_TOKEN: ${{ secrets.PUB_DEV_TOKEN }}
        working-directory: packages/flet
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            mkdir -p "$HOME/.config/dart"
            printf %s "$PUB_DEV_TOKEN" | base64 --decode > "$HOME/.config/dart/pub-credentials.json"

            # patch pubspec for release
            patch_pubspec_version ./pubspec.yaml "$PKG_VER"

            dart pub publish --force
          else
            dart pub publish --dry-run || exit 0
          fi

  # =============================
  # Build Flet Client for Windows
  # =============================
  build_windows:
    name: Build Flet Client for Windows
    runs-on: windows-latest
    needs:
      - python_tests
      - build_flet_package
    if: ${{ github.event_name != 'pull_request' || github.base_ref != github.ref_name }}
    env:
      BUILD_VER: ${{ needs.build_flet_package.outputs.BUILD_VER }}
      PYPI_VER: ${{ needs.build_flet_package.outputs.PYPI_VER }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup uv
        uses: astral-sh/setup-uv@v6

      - name: Setup Flutter
        uses: kuhnroyal/flutter-fvm-config-action/setup@v3
        with:
          path: '.fvmrc'
          cache: true

      - name: Prepare env and patch versions
        shell: bash
        run: |
          source "$SCRIPTS/common.sh"

          # Convert to POSIX for bash compatibility
          SDK_PYTHON_POSIX="$(cygpath -u "$SDK_PYTHON")"
          SCRIPTS_POSIX="$(cygpath -u "$SCRIPTS")"

          # Replace: version = ""  -> version = "<PYPI_VER>"
          vp="${SDK_PYTHON_POSIX}/packages/flet-desktop/src/flet_desktop/version.py"
          sed -i 's/^version = ""$/version = "'"$PYPI_VER"'"/' "$vp"

          patch_toml_versions "${SDK_PYTHON_POSIX}/packages/flet-desktop/pyproject.toml" "$PYPI_VER"

      - name: Build Flutter Windows client
        env:
          RELEASE_DIR: ${{ env.ROOT }}\client\build\windows\x64\runner\Release
        shell: bash
        run: |
          # Normalize paths for bash
          RELEASE_DIR_POSIX="$(cygpath -u "$RELEASE_DIR")"
          SDK_PYTHON_POSIX="$(cygpath -u "$SDK_PYTHON")"
          WINDIR_POSIX="$(cygpath -u "$WINDIR")"

          echo "Files in $WINDIR:"
          ls -la "$SDK_PYTHON"

          cd client
          flutter build windows --build-name="$BUILD_VER"

          # Copy needed runtime DLLs
          cp "${WINDIR_POSIX}/system32/msvcp140.dll" "$RELEASE_DIR_POSIX"
          cp "${WINDIR_POSIX}/system32/vcruntime140.dll" "$RELEASE_DIR_POSIX"
          cp "${WINDIR_POSIX}/system32/vcruntime140_1.dll" "$RELEASE_DIR_POSIX"

          # Rename Release folder to flet
          RUNNER_DIR="$(dirname "$RELEASE_DIR_POSIX")"
          mv "$RELEASE_DIR_POSIX" "${RUNNER_DIR}/flet"

          # Zip up the runner
          cd build/windows/x64/runner
          7z a flet-windows.zip flet

          # Stage app into Python package
          mkdir -p "${SDK_PYTHON_POSIX}/packages/flet-desktop/src/flet_desktop/app"
          cp -r flet "${SDK_PYTHON_POSIX}/packages/flet-desktop/src/flet_desktop/app/flet"

      - name: Build Python wheels
        shell: bash
        run: |
          source "$SCRIPTS/common.sh"

          # Convert Windows env paths to POSIX for bash
          SDK_PYTHON_POSIX="$(cygpath -u "$SDK_PYTHON")"

          cd "$SDK_PYTHON"
          uv build --wheel --package flet-desktop

          # Ensure glob expands
          shopt -s nullglob

          for wheel in dist/*-py3-none-any.whl; do
            repackage_wheel_with_tag "$wheel" "py3-none-win_amd64"
            repackage_wheel_with_tag "$wheel" "py3-none-win32"
            rm -f "$wheel"
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          if-no-files-found: error
          path: |
            client/build/windows/x64/runner/flet-windows.zip
            sdk/python/dist/*.whl

      - name: Publish Python wheels to PyPI
        if: ${{ (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')) && github.event_name != 'pull_request' }}
        shell: bash
        working-directory: ${{ env.SDK_PYTHON }}
        run: uv publish dist/flet_desktop-*.whl

  # ===========================
  # Build Flet Client for macOS
  # ===========================
  build_macos:
    name: Build Flet Client for macOS
    runs-on: macos-latest
    needs:
      - python_tests
      - build_flet_package
    env:
      BUILD_VER: ${{ needs.build_flet_package.outputs.BUILD_VER }}
      PYPI_VER: ${{ needs.build_flet_package.outputs.PYPI_VER }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup uv
        uses: astral-sh/setup-uv@v6

      - name: Setup Flutter
        uses: kuhnroyal/flutter-fvm-config-action/setup@v3
        with:
          path: '.fvmrc'
          cache: true

      - name: Build Flutter macOS client
        shell: bash
        run: |
          pushd client
          flutter build macos --build-name="$BUILD_VER"
          tar -czvf flet-macos.tar.gz -C build/macos/Build/Products/Release Flet.app
          mkdir -p "${SDK_PYTHON}/packages/flet-desktop/src/flet_desktop/app"
          cp flet-macos.tar.gz "${SDK_PYTHON}/packages/flet-desktop/src/flet_desktop/app"
          popd

      - name: Build Python wheels
        shell: bash
        working-directory: ${{ env.SDK_PYTHON }}
        run: |
          source "$SCRIPTS/common.sh"

          patch_python_package_versions
          uv build --wheel --package flet-desktop

          for file in dist/*-py3-none-any.whl; do
            repackage_wheel_with_tag "$file" "py3-none-macosx_12_0_arm64"
            repackage_wheel_with_tag "$file" "py3-none-macosx_10_14_x86_64"
            rm "$file"
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifacts
          if-no-files-found: error
          path: |
            sdk/python/dist/*.whl
            client/flet-macos.tar.gz

      - name: Publish Python wheels to PyPI
        if: >
          github.event_name != 'pull_request' && (
            startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'
          )
        working-directory: ${{ env.SDK_PYTHON }}
        run: uv publish dist/flet_desktop-*.whl

  # ===========================
  # Build Flet Client for Linux
  # ===========================
  build_linux:
    name: Build Flet Client for Linux ${{ matrix.title }}
    runs-on: ${{ matrix.runner }}
    needs:
      - python_tests
      - build_flet_package
    strategy:
      matrix:
        include:
          - arch: arm64
            runner: ubuntu-24.04-arm
            build_arch: arm64
            platform_arch: aarch64
            title: ARM64
          - arch: amd64
            runner: ubuntu-24.04
            build_arch: x64
            platform_arch: x86_64
            title: AMD64
    env:
      BUILD_VER: ${{ needs.build_flet_package.outputs.BUILD_VER }}
      PYPI_VER: ${{ needs.build_flet_package.outputs.PYPI_VER }}
      ARCH: ${{ matrix.arch }}
      BUILD_ARCH: ${{ matrix.build_arch }}
      PLATFORM_ARCH: ${{ matrix.platform_arch }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup uv
        uses: astral-sh/setup-uv@v6

      - name: Get Flutter version from ".fvmrc"
        uses: kuhnroyal/flutter-fvm-config-action/config@v3
        id: fvm-config-action
        with:
          path: '.fvmrc'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ steps.fvm-config-action.outputs.FLUTTER_VERSION }}
          channel: ${{ matrix.arch == 'arm64' && 'master' || 'stable' }}  # https://github.com/subosito/flutter-action/issues/345#issuecomment-2657332687
          cache: true

      - name: Install dependencies
        shell: bash
        run: |
          sudo sed -i.bak '/apt.postgresql.org/s/^/# /' /etc/apt/sources.list
          sudo apt update --allow-releaseinfo-change
          sudo apt install -y clang libgtk-3-dev libasound2-dev
          sudo apt install -y \
            libmpv-dev mpv \
            libgstreamer1.0-dev \
            libgstreamer-plugins-base1.0-dev \
            libgstreamer-plugins-bad1.0-dev \
            gstreamer1.0-plugins-base gstreamer1.0-plugins-good \
            gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly \
            gstreamer1.0-libav gstreamer1.0-tools gstreamer1.0-x \
            gstreamer1.0-alsa gstreamer1.0-gl gstreamer1.0-gtk3 \
            gstreamer1.0-qt5 gstreamer1.0-pulseaudio

      - name: Build Flutter Linux clients
        shell: bash
        working-directory: client
        run: |
          build_flutter() {
            local PACKAGE_NAME="$1"
            local ARTIFACT_SUFFIX=""
            if [[ "$PACKAGE_NAME" == "flet-desktop-light" ]]; then
              ARTIFACT_SUFFIX="-light"
            fi

            echo "::group::($PACKAGE_NAME) Preparing sources"
            # Reset Flutter app files so light edits don't leak into full or vice-versa
            git checkout -- pubspec.yaml lib/main.dart || true

            if [[ "$PACKAGE_NAME" == "flet-desktop-light" ]]; then
              # Strip FAT_CLIENT blocks for the light flavor
              sed -i '/--FAT_CLIENT_START--/,/--FAT_CLIENT_END--/d' pubspec.yaml
              sed -i '/--FAT_CLIENT_START--/,/--FAT_CLIENT_END--/d' lib/main.dart
            fi
            echo "::endgroup::"

            echo "::group::($PACKAGE_NAME) Flutter build"
            flutter build linux --build-name="$BUILD_VER"
            mv "build/linux/${BUILD_ARCH}/release/bundle" "build/linux/${BUILD_ARCH}/release/flet"
            tar -czvf "flet-linux${ARTIFACT_SUFFIX}-${ARCH}.tar.gz" -C "build/linux/${BUILD_ARCH}/release" flet

            # Ship the archive into the Python package so the wheels can bundle it later
            mkdir -p "${SDK_PYTHON}/packages/flet-desktop/src/flet_desktop/app"
            cp "flet-linux${ARTIFACT_SUFFIX}-${ARCH}.tar.gz" "${SDK_PYTHON}/packages/flet-desktop/src/flet_desktop/app/flet-linux-$ARCH.tar.gz"
            echo "::endgroup::"
          }

          build_flutter "flet-desktop-light"
          build_flutter "flet-desktop"

      - name: Build Python wheels
        shell: bash
        working-directory: client
        run: |
          source "$SCRIPTS/common.sh"
          # Ensure glob expands
          shopt -s nullglob

          echo "::group::Patch Python package versions"
          pushd "$SDK_PYTHON"
          patch_python_package_versions
          echo "::endgroup::"

          # directory which will contain uv-build output
          dist="${SDK_PYTHON}/dist"

          build_wheels() {
            local PACKAGE_NAME="$1"
            local FLET_DESKTOP="${SDK_PYTHON}/packages/flet-desktop"

            echo "::group::($PACKAGE_NAME) Build wheels"
            pushd "$FLET_DESKTOP"

            # Patch the package's name in pyproject.toml to match the current package name'
            patch_toml_package_name "${FLET_DESKTOP}/pyproject.toml" "$PACKAGE_NAME"
            # Build the package's wheel (uv writes to $SDK_PYTHON_PATH/dist)
            uv build --wheel

            # Find all universal wheels for the current package
            universal=( "${dist}/${PACKAGE_NAME//-/_}-"*"-py3-none-any"*.whl )

            if (( ${#universal[@]} == 0 )); then
              echo "ERROR: No universal wheels found in ${dist} for ${PACKAGE_NAME}."
              ls -la "$dist" || true
              exit 1
            fi

            # Wheel tags to generate from the universal wheel
            wheel_tags=(
              "py3-none-manylinux_2_17_${PLATFORM_ARCH},py3-none-manylinux2014_${PLATFORM_ARCH}"
              "py3-none-musllinux_1_2_${PLATFORM_ARCH}"
            )

            # Repackage each universal wheel with all specified platform tags
            for wheel in "${universal[@]}"; do
              echo "Retagging $wheel"
              for tag in "${wheel_tags[@]}"; do
                echo "Tagging $wheel with $tag"
                uv run "${SCRIPTS}/repackage_wheel_with_tag.py" "$wheel" "$tag"
              done
              # Delete the original universal wheel
              rm -f $wheel
            done

            echo "::endgroup::"
          }

          build_wheels "flet-desktop-light"
          build_wheels "flet-desktop"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.arch }}-artifacts
          if-no-files-found: error
          path: |
            client/flet-linux*.tar.gz
            sdk/python/dist/*.whl

      - name: Publish Python wheels to PyPI
        if: >
          github.event_name != 'pull_request' && (
            startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'
          )
        working-directory: ${{ env.SDK_PYTHON }}
        run: |
          uv publish dist/flet_desktop_light-*.whl
          uv publish dist/flet_desktop-*.whl

  # =========================
  # Build Flet Client for Web
  # =========================
  build_web:
    name: Build Flet Client for Web
    runs-on: ubuntu-latest
    needs:
      - python_tests
      - build_flet_package
    env:
      PYPI_VER: ${{ needs.build_flet_package.outputs.PYPI_VER }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup uv
        uses: astral-sh/setup-uv@v6

      - name: Setup Flutter
        uses: kuhnroyal/flutter-fvm-config-action/setup@v3
        with:
          path: '.fvmrc'
          cache: true

      - name: Build Web client
        shell: bash
        run: |
          # Compute Pyodide URLs
          PYODIDE_URL="https://github.com/pyodide/pyodide/releases/download/${PYODIDE_VERSION}/pyodide-core-${PYODIDE_VERSION}.tar.bz2"
          PYODIDE_CDN_URL="https://cdn.jsdelivr.net/pyodide/v${PYODIDE_VERSION}/full"

          # Flutter Web client
          pushd client
          flutter build web --wasm
          cp -R build/web "${SDK_PYTHON}/packages/flet-web/src/flet_web"

          # Safari mobile workaround: https://github.com/flutter/flutter/issues/145111#issuecomment-2714599139
          FLUTTER_JS_DIR="$(dirname "$(command -v flutter)")/cache/flutter_web_sdk/flutter_js"
          cp "$FLUTTER_JS_DIR/flutter.js.map" "${SDK_PYTHON}/packages/flet-web/src/flet_web/web"

          # Download the Pyodide tarball and extract its contents into the web build folder
          curl -L "$PYODIDE_URL" | tar -xj -C "${SDK_PYTHON}/packages/flet-web/src/flet_web/web"

          # Download the prebuilt 'packaging' wheel
          curl -L "${PYODIDE_CDN_URL}/packaging-24.2-py3-none-any.whl" -o "${SDK_PYTHON}/packages/flet-web/src/flet_web/web/pyodide/packaging-24.2-py3-none-any.whl"

          # Download the prebuilt 'micropip' wheel
          curl -L "${PYODIDE_CDN_URL}/micropip-0.8.0-py3-none-any.whl" -o "${SDK_PYTHON}/packages/flet-web/src/flet_web/web/pyodide/micropip-0.8.0-py3-none-any.whl"

          popd

          # Archive the entire built Flutter web client into a gzipped tarball
          tar -czvf client/build/flet-web.tar.gz -C client/build/web .

      - name: Build Python package
        shell: bash
        run: |
          source "$SCRIPTS/common.sh"
          patch_python_package_versions
          uv build --wheel --package flet-web

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-artifacts
          if-no-files-found: error
          path: |
            client/build/flet-web.tar.gz
            sdk/python/dist/*.whl

      - name: Publish Python wheels to PyPI
        if: >
          github.event_name != 'pull_request' && (
            startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'
          )
        working-directory: ${{ env.SDK_PYTHON }}
        run: uv publish dist/flet_web-*.whl

  # =======================
  # Build flet and flet-cli
  # =======================
  build_flet_and_cli_wheels:
    name: Build flet and flet-cli Python wheels
    runs-on: ubuntu-latest
    env:
      PYPI_VER: ${{ needs.build_flet_package.outputs.PYPI_VER }}
    needs:
      - python_tests
      - build_flet_package
      - build_windows
      - build_macos
      - build_linux
      - build_web
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup uv
        uses: astral-sh/setup-uv@v6

      - name: Build wheels
        shell: bash
        run: |
          source "$SCRIPTS/common.sh"
          patch_python_package_versions
          uv build --wheel --package flet-cli
          uv build --wheel --package flet
          update_flet_wheel_deps dist

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: flet-and-flet-cli-wheels
          path: sdk/python/dist/*.whl

      - name: Publish wheels to PyPI
        if: >
          github.event_name != 'pull_request' && (
            startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'
          )
        shell: bash
        working-directory: ${{ env.SDK_PYTHON }}
        run: |
          uv publish dist/flet_cli-*.whl
          uv publish dist/flet-*.whl

  # ==============
  # GitHub Release
  # ==============
  release:
    name: Publish GitHub Release
    runs-on: ubuntu-latest
    needs: build_flet_and_cli_wheels
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create/Update GitHub Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true
          preserve_order: true
          overwrite_files: true
          fail_on_unmatched_files: true
          files: |
            dist/**/*.{whl,tar.gz,zip}
